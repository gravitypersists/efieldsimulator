// Generated by CoffeeScript 1.6.3
(function() {
  define([], function() {
    var Arrow, Charge, EField, HEIGHT, WIDTH, tpl;
    WIDTH = 730;
    HEIGHT = 600;
    tpl = "<svg width=730 height=600 style=\"position:absolute; top:0px; left:100px;\">\n  <marker id=\"triangle\" viewBox=\"0 0 10 10\" refX=\"0\" refY=\"5\"\n              markerUnits=\"strokeWidth\" markerWidth=\"4\" markerHeight=\"3\" orient=\"auto\">\n    <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n  </marker>\n</svg>";
    Arrow = (function() {
      function Arrow(x, y) {
        this.x = x;
        this.y = y;
      }

      Arrow.prototype.makeLine = function() {
        var _this = this;
        this.line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        _.map({
          'x1': this.x,
          'y1': this.y,
          'x2': this.x,
          'y2': this.y + 8,
          'stroke': 'black',
          'stroke-width': '1.5',
          'marker-end': 'url(#triangle)'
        }, function(v, k) {
          return _this.line.setAttribute(k, v);
        });
        return this.line;
      };

      Arrow.prototype.setVector = function(angle, strength) {
        this.angle = angle;
        this.strength = strength;
        this.line.setAttribute("transform", "rotate(" + this.angle + ", " + this.x + ", " + this.y + ")");
        return this.line.setAttribute("opacity", this.strength);
      };

      return Arrow;

    })();
    Charge = (function() {
      function Charge(x, y) {
        this.x = x;
        this.y = y;
      }

      return Charge;

    })();
    EField = (function() {
      function EField(gridRes) {
        var arrow, i, j, m, n, _i, _j,
          _this = this;
        this.gridRes = gridRes != null ? gridRes : 20;
        this.fieldsvg = $(tpl);
        $('body').append(this.fieldsvg);
        this.chargesvg = $('<svg style="position:absolute; top:0px; left:100px;" width=730 height=600></svg>');
        $('body').append(this.chargesvg);
        this.chargesvg.click(function(e) {
          if (e.shiftKey) {
            return _this.addCharge(e.offsetX, e.offsetY);
          } else {
            return _this.addPointCharge(e.offsetX, e.offsetY);
          }
        });
        this.charges = [];
        this.arrows = [];
        m = Math.floor(WIDTH / this.gridRes);
        n = Math.floor(HEIGHT / this.gridRes);
        for (i = _i = 1; 1 <= m ? _i <= m : _i >= m; i = 1 <= m ? ++_i : --_i) {
          for (j = _j = 1; 1 <= n ? _j <= n : _j >= n; j = 1 <= n ? ++_j : --_j) {
            arrow = new Arrow(i * this.gridRes, j * this.gridRes);
            this.fieldsvg.append(arrow.makeLine());
            this.arrows.push(arrow);
          }
        }
        this.render();
        this.addCircleOfCharges(20, 200, 365, 300);
      }

      EField.prototype.render = function() {
        var _this = this;
        return _.each(this.arrows, function(arrow) {
          var Dx, Dy, angle, magnitude;
          Dx = 0;
          Dy = 0;
          _.each(_this.charges, function(charge) {
            var de, dx, dy;
            dx = charge.x - arrow.x;
            dy = (charge.y - arrow.y) * (-1);
            de = 1 / (Math.pow(dx, 2) + Math.pow(dy, 2));
            Dx += de * dx;
            return Dy += de * dy;
          });
          angle = Math.atan(Dx / Dy) * 360 / (2 * Math.PI);
          if (Dy >= 0) {
            angle += 180;
          }
          magnitude = Math.sqrt(Math.pow(Dx, 2) + Math.pow(Dy, 2)) * 30;
          return arrow.setVector(angle, magnitude);
        });
      };

      EField.prototype.addCharge = function(x, y) {
        var circle;
        this.charges.push(new Charge(x, y));
        this.render();
        circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        _.map({
          'cx': x,
          'cy': y,
          'r': 10,
          'fill': 'red',
          'stroke': 'none'
        }, function(v, k) {
          return circle.setAttribute(k, v);
        });
        return this.chargesvg.append(circle);
      };

      EField.prototype.addPointCharge = function(x, y) {
        var circle, electron, electronInterval,
          _this = this;
        electron = {
          x: x,
          y: y,
          vx: 0,
          vy: 0
        };
        circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        _.map({
          'cx': electron.x,
          'cy': electron.y,
          'r': 4,
          'fill': 'blue',
          'stroke': 'none'
        }, function(v, k) {
          return circle.setAttribute(k, v);
        });
        this.chargesvg.append(circle);
        return electronInterval = setInterval(function() {
          var Ex, Ey, magnitude;
          Ex = 0;
          Ey = 0;
          _.each(_this.charges, function(charge) {
            var de, dx, dy;
            dx = charge.x - electron.x;
            dy = charge.y - electron.y;
            de = 1 / (Math.pow(dx, 2) + Math.pow(dy, 2));
            Ex += de * dx;
            return Ey += de * dy;
          });
          magnitude = Math.sqrt(Math.pow(Ex, 2) + Math.pow(Ey, 2)) * 30;
          electron.vx += Ex * magnitude * .01;
          electron.vy += Ey * magnitude * .01;
          electron.x = electron.x + electron.vx * 1000 / 40;
          electron.y = electron.y + electron.vy * 1000 / 40;
          circle.setAttribute('cx', electron.x);
          return circle.setAttribute('cy', electron.y);
        }, 1000 / 40);
      };

      EField.prototype.addCircleOfCharges = function(num, r, x, y) {
        var i, _i;
        for (i = _i = 1; 1 <= num ? _i <= num : _i >= num; i = 1 <= num ? ++_i : --_i) {
          this.addCharge(x + Math.sin(i * 360 / num * Math.PI / 180) * r, y + Math.cos(i * 360 / num * Math.PI / 180) * r);
          this.addCharge(x - Math.sin(i * 360 / num * Math.PI / 180) * r, y + Math.cos(i * 360 / num * Math.PI / 180) * r);
        }
        return this.render();
      };

      return EField;

    })();
    return new EField();
  });

}).call(this);
